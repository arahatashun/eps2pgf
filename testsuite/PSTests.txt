parser 1: [1 2] count 1 eq exch type /arraytype eq
parser 2: <123d>(\022=) eq  <~j34rt~>(\343\314\266\226) eq <~z~>(\000\000\000\000)eq
parser 3: <</a(foo)/b 3>> count 1 eq exch type /dicttype eq
parser 4: (lka(oi){\)) dup length 9 eq exch type /stringtype eq
parser 5: {{ {1 2 add} {/foo put}} (}) 1 2 add} count 1 eq exch type /arraytype eq
bool  1 - eq 1: 1 1 eq 1.0 1 eq 1 1.0 eq  1.0 1.0 eq
bool  2 - eq 2: (abc) (abc) eq (abc) /abc eq /abc (abc) eq
bool  3 - eq 3: false false eq mark [ eq null null eq
bool  4 - eq 4: [1 2 3] dup eq [1 2 3] [1 2 3] eq false eq
bool  5 - eq 5: [1 2 3 4 5 6] dup 2 3 getinterval eq false eq
bool  6 - ne:  1 1 ne false eq  (abc)(abc) ne false eq  [1 2 3] [1 2 3] ne
bool  7 - ge: 4.2 4 ge  (abc)(de)ge false eq  (aba)(ab) ge  (aba)(aba) ge
bool  8 - gt: 4.0 4 gt false eq  4.4 4 gt  (abc)(de)gt false eq  (aba)(aba)gt false eq (abc)(ab)gt
bool  9 - le: 3.8 4 le  (abc)(de) le  (aba)(aba) le  (aba)(ab)le false eq
bool 10 - lt: 4.0 4 lt false eq  (abc)(de)lt  (aba)(aba)lt false eq (aba)(ab)lt false eq
bool 11 - and: true true and  true false and false eq  99 1 and 1 eq  52 7 and 4 eq
bool 12 - not: true not false eq  false not  52 not -53 eq
bool 13 - or: true true or  true false or  false false or false eq  17 5 or 21 eq
bool 14 - xor: true true xor false eq  true false xor  false false xor false eq  7 3 xor 4 eq  12 3 xor 15 eq
bool 15 - bitshift: 23 5 bitshift 736 eq  23 -2 bitshift 5 eq  -8945 13 bitshift -73277440 eq  -8945 -8 bitshift 16777181 eq
type  1 - type 1: [1 2 3] type /arraytype eq {1 2 add} type /arraytype eq matrix type /arraytype eq
type  2 - type 2: true type /booleantype eq  null type /nulltype eq  mark type /marktype eq
type  3 - type 3: 123 type /integertype eq  1.1 type /realtype eq  (abc) type /stringtype eq
type  4 - type 4: 10 dict type /dicttype eq  /add load type /operatortype eq
type  5 - type 5: /burp type /nametype eq  1 type type /nametype eq
type  6 - cvlit: {1 2 add} dup cvlit exch bind exch 2 get type /operatortype eq  1 cvlit 
type  7 - cvx 1: [1 2 3] dup cvx exec count 4 eq 5 -1 roll exec count 5 eq
type  8 - cvx 2: [1 2 3] dup cvx 2 /x put 2 get /x eq  [1 2 3] dup cvx eq
type  9 - xcheck 1: /koe xcheck false eq  [1 2 3] xcheck false eq  {1 2 3} xcheck true eq
type 10 - xcheck 2: /add cvx load xcheck true eq  /koe cvx xcheck true eq
type 11 - executeonly: (123) executeonly rcheck false eq
type 12 - noaccess: [1 2] noaccess {/abc noaccess rcheck} stopped true eq  {9 dict executeonly noaccess} stopped true eq
type 13 - readonly: [1 2 3] readonly dup rcheck true eq exch wcheck false eq
type 14 - rcheck: [1 2 3] rcheck true eq
type 15 - wcheck: (koe) wcheck true eq
type 16 - cvi: (3.3E1) cvi 33 eq  2 cvi 2 eq  -47.8 cvi -47 eq  520.9 cvi 520 eq
type 17 - cvn 1: (abc) cvn type /nametype eq  (abc) cvn xcheck false eq   (abc) cvn /abc eq
type 18 - cvn 2: (abc) cvx cvn type /nametype eq  (abc) cvx cvn xcheck true eq   (abc) cvx cvn /abc eq
type 19 - cvr: 1.1 cvr 1.1 eq  78 cvr 78.0 eq  (78.9) cvr 78.9 eq  (1e3) cvr 1000.0 eq
type 20 - cvrs 1: /temp 12 string def  123 10 temp cvrs (123) eq  -123 10 temp cvrs (-123) eq  123.4 10 temp cvrs (123.4) eq
type 21 - cvrs 2: /temp 12 string def  123 16 temp cvrs (7B) eq -123 16 temp cvrs (FFFFFF85) eq  123.4 16 temp cvrs (7B) eq
type 22 - cvs: 579 20 string cvs (579) eq  mark 20 string cvs (--nostringval--) eq  /foo 20 string cvs (foo) eq
stack  1 - pop: true true false pop
stack  2 - exch: 1 2 exch 1 eq exch 2 eq
stack  3 - dup 1: (abcde) dup count 2 eq  /foo dup cvx xcheck true eq  exch xcheck false eq
stack  4 - dup 2: (abc) dup cvx xcheck true eq  exch xcheck false eq  1.0 dup cvx xcheck true eq  exch xcheck false eq
stack  5 - dup 3: 1 dict dup cvx pop xcheck true eq
stack  6 - copy 1: (a)(b)(c) 2 copy (c) eq 5 1 roll (b) eq 5 1 roll (c) eq 5 1 roll (b) eq 5 1 roll (a) eq
stack  7 - copy 2: (a)(b)(c) 0 copy (c) eq 3 1 roll (b) eq 3 1 roll (a) eq
stack  8 - index 1: (a)(b) (c) (d) 0 index (d) eq 5 1 roll (d) eq 5 1 roll (c) eq 5 1 roll (b) eq 5 1 roll (a)
stack  9 - index 2: (a)(b) (c) (d) 3 index (a) eq 5 1 roll (d) eq 5 1 roll (c) eq 5 1 roll (b) eq 5 1 roll (a)
stack 10 - roll 1: (a)(b)(c) 3 -1 roll (a) eq 3 1 roll (c) eq 3 1 roll (b) eq
stack 11 - roll 2: (a)(b)(c) 3 1 roll (b) eq 3 1 roll (a) eq 3 1 roll (c) eq
stack 12 - roll 2: (a)(b)(c) 3 0 roll (c) eq 3 1 roll (b) eq 3 1 roll (a) eq
stack 13 - clear: 1 2 3 4 5 clear count 0 eq
stack 14 - count: 1 (b) 3 (d) 5 (f) count 6 eq
stack 15 - mark: mark 1 2 3] type /arraytype eq
stack 16 - cleartomark: 1 2 [ 3 4 5 cleartomark 2 eq 2 1 roll 1 eq
stack 17 - counttomark 1: 1 mark 2 3 counttomark 2 eq 5 1 roll 3 eq 5 1 roll 2 eq 5 1 roll mark eq 5 1 roll 1 eq
stack 18 - counttomark 2: 1 mark counttomark 0 eq 3 1 roll mark eq 3 1 roll 1 eq
array  1 - array: 3 array dup type /arraytype eq exch dup 0 get null eq exch dup 1 get null eq exch dup 2 get null eq
array  2 - length 1: [1 2 3] length 3 eq [] length 0 eq
array  3 - length 2: {1 2 3} length 3 eq {} length 0 eq
array  4 - get 1: [31 41 59] 0 get 31 eq  [0 (string 1) [] {add 2 div}] 2 get dup type /arraytype eq exch length 0 eq
array  5 - get 2: {add 41 59} 0 get /add eq
array  6 - put 1: /ar [5 17 3 8] def ar 2 (abcd) put ar 2 get (abcd) eq ar length 4
array  7 - put 2: {a b /c} dup 1 (hoi) put dup length 3 eq exch 1 get (hoi) eq
array  8 - getinterval 1: [9 8 7 6 5] 1 3 getinterval dup 0 get 8 eq exch dup 1 get 7 eq exch dup 2 get 6 eq exch length 3 eq
array  9 - getinterval 2: {9 8 7 6 5} 1 3 getinterval dup 0 get 8 eq exch dup 1 get 7 eq exch dup 2 get 6 eq exch length 3 eq
array 10 - getinterval 3: [1 2 3 4 5 6] 1 4 getinterval 1 2 getinterval dup 0 get 3 eq exch 1 get 4 eq
array 11 - getinterval 4: {1 2 3} 1 2 getinterval xcheck true eq
array 12 - putinterval 1: /ar [5 8 2 7 3] def ar 1 [(a)(b)(c)] putinterval ar 1 get (a) eq ar length 5 eq
array 13 - putinterval 2: {5 8 2 7 3} dup 1 {(a)(b)(c)} putinterval dup 1 get (a) eq exch length 5 eq
array 14 - putinterval 3: [1 2 3 4 5 6] dup 3 3 getinterval 1 [98 99] putinterval 5 get 99 eq
array 15 - astore: (a)(bcd)(ef) 3 array astore dup length 3 eq exch 2 get (ef) eq
array 16 - aload 1: [23 (ab) -1] aload type /arraytype eq 4 1 roll -1 eq 4 1 roll (ab) eq 4 1 roll 23 eq
array 17 - aload 2: {23 (ab) -1} aload type /arraytype eq 4 1 roll -1 eq 4 1 roll (ab) eq 4 1 roll 23 eq
array 18 - copy 1: [/a /b /c /d /e /f] dup [1 2 3] exch copy length 3 eq exch dup 0 get 1 eq exch 4 get /e eq
array 19 - copy 2: {/a /b /c /d /e /f} dup {1 2 3} exch copy length 3 eq exch dup 0 get 1 eq exch 4 get /e eq
array 20 - copy 3: {1 2 3} {/a /b /c /d /e /f} copy xcheck true eq
array 21 - forall 1: 0 [13 29 3 -8 21] {add} forall 58 eq
array 22 - forall 2: {/a 78} {} forall 78 eq exch /a eq
string  1 - string: 5 string (\000\000\000\000\000) eq
string  2 - length: (0123456789) length 10 eq 
string  3 - get 1: (abcdef) 4 get 101 eq
string  4 - get 2: (abcdef) 2 2 getinterval 1 get 100 eq
string  5 - put: (abcdef) dup 2 48 put (ab0def) eq  
string  6 - getinterval 1: (abcdef) 3 2 getinterval (de) eq (abcdef) 3 3 getinterval (def) eq
string  7 - getinterval 2: (abcdef) 2 4 getinterval 1 2 getinterval (de) eq
string  8 - putinterval 1: (abcdef) dup 2 (1234) putinterval (ab1234) eq
string  9 - putinterval 2: (abcdef) dup 2 3 getinterval 1 (xx) putinterval (abcxxf) eq
string 10 - copy 1: (1234567890) dup (xxxxx) exch copy (xxxxx) eq 2 1 roll (xxxxx67890) eq
string 11 - copy 2: (abc) (def) 2 copy 1 (x) putinterval (abc) eq 3 1 roll (dxf) eq 3 1 roll (abc) eq
string 12 - forall: 0 (abcdef) {add} forall 597 eq (ty) {} forall 121 eq 2 1 roll 116 eq
string 13 - anchorsearch 1: (abbc)(ab) anchorsearch 3 1 roll (ab) eq 3 1 roll (bc) eq
string 14 - anchorsearch 2: (abbc)(bb) anchorsearch false eq 2 1 roll (abbc) eq
string 15 - anchorsearch 3: (abbc)(bc) anchorsearch false eq 2 1 roll (abbc) eq
string 16 - anchorsearch 4: (abbc)(B) anchorsearch false eq 2 1 roll (abbc) eq
string 17 - search 1: (abbc)(ab) search 4 1 roll () eq 4 1 roll (ab) eq 4 1 roll (bc) eq
string 18 - search 2: (abbc)(bb) search 4 1 roll (a) eq 4 1 roll (bb) eq 4 1 roll (c) eq
string 19 - search 3: (abbc)(bc) search 4 1 roll (ab) eq 4 1 roll (bc) eq 4 1 roll () eq
string 20 - search 4: (abbc)(B) search false eq 2 1 roll (abbc) eq
string 21 - token 1: (15(St1){1 2 add}) token 3 1 roll 15 eq 3 1 roll ((St1){1 2 add}) eq
string 22 - token 2: ((St1){1 2 add}) token 3 1 roll (St1) eq 3 1 roll ({1 2 add}) eq
string 23 - token 3: ({1 2 add}) token 3 1 roll dup type /arraytype eq 4 1 roll xcheck 4 1 roll () eq
string 24 - token 4: () token false eq count 1 eq
string 25 - misc 1: (abcdefghijklmn) dup 1.2 exch 3 5 getinterval cvs (1.2) eq 2 1 roll (abc1.2ghijklmn) eq
dict  1 - dict: 10 dict type /dicttype eq
dict  2 - <<: << 1 2 3 counttomark 3 eq
dict  3 - >>: mark /test {1 add} >> type /dicttype eq
dict  4 - length: 10 dict length 0 eq  << /a 1/b 2 /c {2 add}>> length 3 eq
dict  5 - maxlength: 11 dict maxlength 11 eq  << /a 1 /b 2 >> maxlength 2 eq
dict  6 - begin/currentdict: 10 dict dup begin currentdict eq
dict  7 - end: 10 dict begin currentdict end currentdict dup 3 1 roll ne exch userdict eq
dict  8 - def 1: /str (abcdefghi) def (123) str cvs  str (123defghi) eq
dict  9 - def 2: /str1 (1 2 add) def str1 (1 2 add) eq  /str2 (1 2 add) cvx def str2 3 eq
dict 10 - def 3: (abc) dup /foo exch def cvx pop foo xcheck false eq
dict 11 - load: << /a (abc) /b 123 >> begin  /a load (abc) eq  /b load 123 eq
dict 12 - store: /a 123 store a 123 eq  /a (abc) store a (abc) eq
dict 13 - get: <</a 1.0 /b 2 >> /b get 2 eq  /foo (abc) def currentdict /foo get (abc) eq
dict 14 - put: 10 dict dup /foo (bar) put  begin foo (bar) eq
dict 15 - undef: 10 dict dup /foo (bar) put  dup /foo undef begin {foo} stopped
dict 16 - known: /mydict 5 dict def mydict /total 0 put mydict /total known  mydict /badname known false eq
dict 17 - where: <</a 123 /b 456>> dup begin <</d (abc) /e (def)>> begin  /b where 3 1 roll eq
dict 18 - copy 1: <</a 123>> <</b (abc) /c (def)>> dup 3 1 roll copy eq
dict 18 - copy 2: <</a 123>> <</b (abc) /c (def)>> copy /a known
dict 19 - forall 1: <</a 123 /b 123>> {} forall  123 eq  4 1 roll dup /b eq exch /a eq or  4 1 roll 123 eq  4 1 roll dup /a eq exch /b eq or
dict 20 - forall 2: 0 <</a 1 /b 2 /c 3>> {exch pop add} forall 6 eq
dict 21 - currentdict/userdict: currentdict userdict eq  10 dict begin currentdict userdict ne
dict 22 - errordict: errordict
dict 23 - $error: $error
dict 24 - systemdict: systemdict type /dicttype eq  {systemdict /foo (bar) put} stopped
dict 25 - globaldict: globaldict type /dicttype eq
dict 26 - statusdict: statusdict type /dicttype eq
dict 27 - countdictstack: countdictstack 3 eq  10 dict begin countdictstack 4 eq
dict 28 - dictstack: 10 array dictstack dup 0 get systemdict eq exch length 3 eq
dict 29 - cleardictstack: 10 dict begin countdictstack 4 eq cleardictstack countdictstack 3 eq
control 1 - for 1: 0 1 1 4 {add} for dup 10 eq exch type /integertype eq
control 2 - for 2: 1 2 6 {} for 5 eq  3 1 roll 3 eq  3 1 roll type /integertype eq
control 3 - for 3: 3 -.5 1 {} for 1.0 eq  5 1 roll 1.5 eq  5 1 roll 2.0 eq  5 1 roll 2.5 eq  5 1 roll 3.0 eq
path  1 - clippath: clippath 1 setgray fill
coor  1 - matrix 1: matrix {} forall  0 eq  6 1 roll 0 eq  6 1 roll 1 eq  6 1 roll 0 eq  6 1 roll 0 eq  6 1 roll 1 eq
coor  2 - matrix 2: matrix dup eq
coor  3 - initmatrix: /m1 matrix currentmatrix def /m2 2 2 scale initmatrix matrix currentmatrix def  m1 0 get m2 0 get eq  m1 1 get m2 1 get eq  m1 2 get m2 2 get eq  m1 3 get m2 3 get eq  m1 4 get m2 4 get eq  m1 5 get m2 5 get eq
coor  4 - identmatrix 1: /m matrix identmatrix def m 0 get 1 eq  m 1 get 0 eq  m 2 get 0 eq  m 3 get 1 eq  m 4 get 0 eq  m 5 get 0 eq
coor  5 - identmatrix 2: matrix dup identmatrix pop [1 0 0 1 0 0] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor  6 - identmatrix 3: 6 array dup  identmatrix pop [1 0 0 1 0 0] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for 
coor  7 - defaultmatrix: /m1 matrix currentmatrix def /m2 matrix defaultmatrix def  m1 0 get m2 0 get eq  m1 1 get m2 1 get eq  m1 2 get m2 2 get eq  m1 3 get m2 3 get eq  m1 4 get m2 4 get eq  m1 5 get m2 5 get eq
coor  8 - currentmatrix: matrix currentmatrix  
coor  9 - setmatrix: [1 2 3 4 5 6] setmatrix /m 6 array currentmatrix def  m 0 get 1 eq  m 1 get 2 eq  m 2 get 3 eq  m 3 get 4 eq  m 4 get 5 eq  m 5 get 6 eq
coor 10 - translate 1: [1.2 3.4 5.6 7.8 9.1 2.3] setmatrix 12.34 56.78 translate matrix currentmatrix [1.2 3.4 5.6 7.8 341.88 487.14] /m2 exch def /m1 exch def 0 1 5 {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.0001 le exch 0 gt} for
coor 11 - translate 2: 12.34 56.78 matrix translate [1 0 0 1 12.34 56.78] /m2 exch def /m1 exch def 0 1 5 {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 12 - scale 1: [1.2 3.4 5.6 7.8 9.1 2.3] setmatrix 12.34 56.78 scale matrix currentmatrix [14.81 41.96 318.0 442.9 9.1 2.3] /m2 exch def /m1 exch def 0 1 5 {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 13 - scale 2: 12.34 56.78 matrix scale [12.34 0 0 56.78 0 0] /m2 exch def /m1 exch def 0 1 5 {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 14 - rotate 1: [1.2 3.4 5.6 7.8 9.1 2.3] setmatrix -56.78 rotate matrix currentmatrix [-4.027 -4.663 4.072 7.118 9.1 2.3] /m2 exch def /m1 exch def 0 1 5 {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 15 - rotate 2: -56.78 matrix rotate [0.548 -0.837 0.837 0.548 0 0] /m2 exch def /m1 exch def 0 1 5 {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 16 - concat: [1.2 3.4 5.6 7.8 9.1 2.3] setmatrix [5.6 7.8 9.0 1.2 3.4 5.6] concat matrix currentmatrix [50.4 79.88 17.52 39.96 44.54 57.54] /m2 exch def /m1 exch def 0 1 5 {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 17 - concatmatrix: [5.6 7.8 9.0 1.2 3.4 5.6] [1.2 3.4 5.6 7.8 9.1 2.3] matrix concatmatrix [50.4 79.88 17.52 39.96 44.54 57.54] /m2 exch def /m1 exch def 0 1 5 {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 18 - transform 1: [1.2 3.4 5.6 7.8 9.1 2.3] setmatrix 56.78 23.96 transform 2 array astore [211.41 382.2] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 19 - transform 2: 56.78 23.96 [1.2 3.4 5.6 7.8 9.1 2.3] transform 2 array astore [211.41 382.2] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 20 - dtransform 1: [1.2 3.4 5.6 7.8 9.1 2.3] setmatrix 56.78 23.96 dtransform 2 array astore [202.31 379.94] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 21 - dtransform 2: 56.78 23.96 [1.2 3.4 5.6 7.8 9.1 2.3] dtransform 2 array astore [202.31 379.94] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 22 - itransform 1: [1.2 3.4 5.6 7.8 9.1 2.3] setmatrix 56.78 23.96 itransform 2 array astore [-25.889 14.062] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 23 - itransform 2: 56.78 23.96 [1.2 3.4 5.6 7.8 9.1 2.3] itransform 2 array astore [-25.889 14.062] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 24 - idtransform 1: [1.2 3.4 5.6 7.8 9.1 2.3] setmatrix 56.78 23.96 idtransform 2 array astore [-31.891 16.973] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 25 - idtransform 2: 56.78 23.96 [1.2 3.4 5.6 7.8 9.1 2.3] idtransform 2 array astore [-31.891 16.973] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
coor 26 - invertmatrix: [1.2 3.4 5.6 7.8 9.1 2.3] matrix invertmatrix [-0.8058 0.3512 0.5785 -0.1240 6.002 -2.911] /m2 exch def /m1 exch def 0 1 m1 length 1 sub {dup m1 exch get 1e-40 add exch m2 exch get 1e-40 add div dup 1 lt {1 exch div} if dup 1.001 le exch 0 gt} for
